I. If we XOR a number with itself then its value is equal to "zero". (1 ^ 1 = 0),(0 ^ 0 = 0)
    Example  14 XOR 14 = 0    =>   1100
         (14^14)               XOR 1100
                                  ______
                                =  0000
                                  ______
                               
   Conclusions:
   1. A number XORed even number of times with itself = 0 
     e.g. 14^14^14^14^14^14 = 0 (6 times 14)
   2. A number XORed odd number of times with itself = number itself
     e.g. 14^14^14^14^14 = 14   (5 times 14)
     
   *Use in Code
  ******************************************************************************************************************************** 
  (1) “Given a set of numbers where all elements occur even number of times except one number, find the odd occurring number”
  ******************************************************************************************************************************** 
   => Solution: // Function to return the only odd occurring element 
   int findOdd(int arr[], int n) { 
     int res = 0, i; 
     for (i = 0; i < n; i++) 
       res ^= arr[i];          // XOR 
     return res; 
    } 
  
   int main(void) { 
     int arr[] = {12, 12, 14, 90, 14, 14, 14}; 
     int n = sizeof(arr)/sizeof(arr[0]); 
     printf ("The odd occurring element is %d ", findOdd(arr, n)); 
     return 0; 
   } 
   // Output: The odd occurring element is 90 

**************************************************************************************************************************************
(2) Find the Missing Number
(https://www.geeksforgeeks.org/find-the-missing-number/)
***************************************************************************************************************************************
You are given a list of n-1 integers and these integers are in the range of 1 to n. There are no duplicates in the list. 
One of the integers is missing in the list. 
Input: arr[] = {1, 2, 4,, 6, 3, 7, 8}
Output: 5

Solution: using XOR A^A = 0 property.
       => 1) XOR all the array elements, let the result of XOR be X1.
          2) XOR all numbers from 1 to n, let XOR be X2.
          3) XOR of X1 and X2 gives the missing number.
         
         Array :   arr[0,1,2,3,4,6];
elements 1 to 6 :   0,1,2,3,4,5,6;
Now (XORing array element)XOR(XORing elements 1 to 6)
 => (0^1^2^3^4^6)^(0^1^2^3^4^5^6)
 => (0^0^1^1^2^2^3^3^4^4^5^6^6)
 => (0^0^0^0^0^5^0)
 => 5
 So the missing number is 5
 
 *********
 code
 *********
 
#include <bits/stdc++.h> 
using namespace std; 
  
// Function to get the missing number 
int getMissingNo(int a[], int n) 
{ 
    // For xor of all the elements in array 
    int x1 = a[0]; 
  
    // For xor of all the elements from 1 to n+1 
    int x2 = 1; 
  
    for (int i = 1; i < n; i++) 
        x1 = x1 ^ a[i]; 
  
    for (int i = 2; i <= n + 1; i++) 
        x2 = x2 ^ i; 
  
    return (x1 ^ x2); 
} 
  
// Driver Code 
int main() 
{ 
    int arr[] = { 1, 2, 4, 5, 6 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int miss = getMissingNo(arr, n); 
    cout << miss; 
} 
***************************************************************************************************************************************
3) To swap two numbers without using a temporary variable
(https://www.geeksforgeeks.org/swap-two-numbers-without-using-temporary-variable/)
***************************************************************************************************************************************
 Using the same property A^A =0
 Suppose we have any two numbers A1 and A2
 1) XOR both numbers A1^A2
 2) Now if you want to store A1 into -> A2, make A2 = (A1^A2) XOR A2
                                                    => A1^A2^A2
                                                    =  A1
 3) Similarly if you want to store A2 into A1, make A1 = (A1^A2)^A1
                                                       => A1^A2^A1
                                                       =  A2
***********
CODE
***********
// C code to swap using XOR 
#include <stdio.h> 
int main() 
{ 
    int x = 10, y = 5; 
  
    // Code to swap 'x' (1010) and 'y' (0101) 
    x = x ^ y; // x now becomes 15 (1111) 
    y = x ^ y; // y becomes 10 (1010) 
    x = x ^ y; // x becomes 5 (0101) 
  
    printf("After Swapping: x = %d, y = %d", x, y); 
  
    return 0; 
} 

**************************************************************************************************************************************
4) Find the two non-repeating elements in an array of repeating elements
   (https://www.geeksforgeeks.org/find-two-non-repeating-elements-in-an-array-of-repeating-elements/)
   =>(Good Explanation: https://www.youtube.com/watch?v=QZzH7ZTksKk)
***************************************************************************************************************************************

